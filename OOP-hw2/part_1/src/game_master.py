from typing import List


class GameMaster:
    '''
    GameMaster class is used to give feedback to the user based on
    the correct code generated by the CodeMaker and the user input gotten
    with CodeBreaker class.

    methods:
            save_correct_code(): method used to save the correct code into the\
            GameMaster instance
            save_user_input(): method used to save the user input to the\
            GameMaster instance for further comparison
            give_feedback(): method that is used to compare correct code\
            to user input and return an array of size 2 with number of right\
            guesses in the correct place and number of right guesses in the\
            wrong place.
    '''
    def __init__(self):
        self._correct_code = []
        self._user_input = []
        self.__array_1 = []
        self.__array_2 = []

    def _save_correct_code(self, correct_code: List):
        '''
        save_correct_code() saves the correct_code into self._correct_code.
        args:
            correct_code: correct code of the type List.
        '''
        self._correct_code = correct_code

    def _save_user_input(self, user_input: List):
        '''
        save_correct_code() saves the user_input into self._user_input.
        args:
            user_input: user input of the type List.
        '''
        self._user_input = user_input

    def __output_correct_position_num(self) -> int:
        correct_position_num = 0
        user_code = self._user_input
        for i in range(0, len(self._correct_code)):
            if user_code[i] == self._correct_code[i]:
                correct_position_num = correct_position_num + 1
            else:
                self.__array_1.append(user_code[i])
                self.__array_2.append(self._correct_code[i])
        return correct_position_num

    def __output_wrong_position_num(self) -> int:
        wrong_position_num = 0
        for i in range(0, len(self.__array_2)):
            if self.__array_1[i] in self.__array_2:
                wrong_position_num = wrong_position_num + 1
        return wrong_position_num

    def _give_feedback(self) -> List:
        '''
        give_feedback() calculates the feedback values by\
        calling helper functions.
        returns:
            List of size 2 with number of right guesses in the correct place\
            and number of right guesses in the wrong place.
        '''
        feedback = []
        feedback.append(self.__output_correct_position_num())
        feedback.append(self.__output_wrong_position_num())

        if self.__array_1 == []:
            feedback = True

        self._user_input = []
        self.__array_1 = []
        self.__array_2 = []

        return feedback
